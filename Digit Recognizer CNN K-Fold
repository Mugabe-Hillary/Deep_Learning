{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "24632a7b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-19T11:47:06.321505Z",
     "iopub.status.busy": "2024-09-19T11:47:06.321113Z",
     "iopub.status.idle": "2024-09-19T11:47:20.899734Z",
     "shell.execute_reply": "2024-09-19T11:47:20.898688Z"
    },
    "papermill": {
     "duration": 14.586574,
     "end_time": "2024-09-19T11:47:20.902397",
     "exception": false,
     "start_time": "2024-09-19T11:47:06.315823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from tensorflow.keras.layers import Input\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler, History,ReduceLROnPlateau, EarlyStopping\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "550a4260",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-19T11:47:20.911511Z",
     "iopub.status.busy": "2024-09-19T11:47:20.910917Z",
     "iopub.status.idle": "2024-09-19T11:47:27.020886Z",
     "shell.execute_reply": "2024-09-19T11:47:27.020038Z"
    },
    "papermill": {
     "duration": 6.116865,
     "end_time": "2024-09-19T11:47:27.023226",
     "exception": false,
     "start_time": "2024-09-19T11:47:20.906361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " #Loading dataset\n",
    "train_data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n",
    "test_data = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a544f779",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-19T11:47:27.031415Z",
     "iopub.status.busy": "2024-09-19T11:47:27.031100Z",
     "iopub.status.idle": "2024-09-19T11:47:27.120160Z",
     "shell.execute_reply": "2024-09-19T11:47:27.119309Z"
    },
    "papermill": {
     "duration": 0.095718,
     "end_time": "2024-09-19T11:47:27.122498",
     "exception": false,
     "start_time": "2024-09-19T11:47:27.026780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Data preprocessing\n",
    "X = train_data.drop(columns=['label'], axis=1)\n",
    "y = train_data['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "15e44d94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-19T11:47:27.130623Z",
     "iopub.status.busy": "2024-09-19T11:47:27.130320Z",
     "iopub.status.idle": "2024-09-19T11:47:27.188580Z",
     "shell.execute_reply": "2024-09-19T11:47:27.187724Z"
    },
    "papermill": {
     "duration": 0.064825,
     "end_time": "2024-09-19T11:47:27.190908",
     "exception": false,
     "start_time": "2024-09-19T11:47:27.126083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Normalizing the pixel values (between 0 and 1)\n",
    "X = X / 255.0\n",
    "\n",
    "# Reshaping X to be 3D - (number of images, 28, 28, 1) for the CNN input\n",
    "X = X.values.reshape(-1, 28, 28, 1)\n",
    "\n",
    "# Converting labels to one-hot encoded vectors\n",
    "y = to_categorical(y, num_classes=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "36c6a0fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-19T11:47:27.199605Z",
     "iopub.status.busy": "2024-09-19T11:47:27.199225Z",
     "iopub.status.idle": "2024-09-19T11:47:27.959494Z",
     "shell.execute_reply": "2024-09-19T11:47:27.958610Z"
    },
    "papermill": {
     "duration": 0.767307,
     "end_time": "2024-09-19T11:47:27.961913",
     "exception": false,
     "start_time": "2024-09-19T11:47:27.194606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize KFold cross-validation\n",
    "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Placeholder for storing cross-validation results\n",
    "fold_accuracies = []\n",
    "\n",
    "# Iterate over each fold\n",
    "for train_index, val_index in kf.split(X):\n",
    "    # Split data into train and validation sets for this fold\n",
    "    X_train_fold, X_val_fold = X[train_index], X[val_index]\n",
    "    y_train_fold, y_val_fold = y[train_index], y[val_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0b5c7cc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-19T11:47:27.970329Z",
     "iopub.status.busy": "2024-09-19T11:47:27.969960Z",
     "iopub.status.idle": "2024-09-19T11:47:28.768430Z",
     "shell.execute_reply": "2024-09-19T11:47:28.767331Z"
    },
    "papermill": {
     "duration": 0.805309,
     "end_time": "2024-09-19T11:47:28.770828",
     "exception": false,
     "start_time": "2024-09-19T11:47:27.965519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "    # Build the CNN model\n",
    "    model = Sequential()\n",
    "    model.add(Input(shape=(28, 28, 1)))  # Input layer with the correct shape\n",
    "    model.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\n",
    "    model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "    model.add(Dropout(0.25))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(128, activation='relu'))\n",
    "    model.add(Dropout(0.5))\n",
    "    model.add(Dense(10, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ae99190d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-19T11:47:28.787679Z",
     "iopub.status.busy": "2024-09-19T11:47:28.787310Z",
     "iopub.status.idle": "2024-09-19T11:49:06.912529Z",
     "shell.execute_reply": "2024-09-19T11:49:06.911374Z"
    },
    "papermill": {
     "duration": 98.13319,
     "end_time": "2024-09-19T11:49:06.914635",
     "exception": false,
     "start_time": "2024-09-19T11:47:28.781445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1726746450.393290      66 service.cc:145] XLA service 0x7b4d2c00b510 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1726746450.393347      66 service.cc:153]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m 50/525\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4711 - loss: 1.5158"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1726746455.023958      66 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 5ms/step - accuracy: 0.8233 - loss: 0.5384 - val_accuracy: 0.9775 - val_loss: 0.0775 - learning_rate: 0.0010\n",
      "Epoch 2/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9689 - loss: 0.1022 - val_accuracy: 0.9839 - val_loss: 0.0551 - learning_rate: 0.0010\n",
      "Epoch 3/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9785 - loss: 0.0719 - val_accuracy: 0.9865 - val_loss: 0.0472 - learning_rate: 0.0010\n",
      "Epoch 4/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9820 - loss: 0.0589 - val_accuracy: 0.9837 - val_loss: 0.0522 - learning_rate: 0.0010\n",
      "Epoch 5/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9831 - loss: 0.0509 - val_accuracy: 0.9869 - val_loss: 0.0503 - learning_rate: 0.0010\n",
      "Epoch 6/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9874 - loss: 0.0405 - val_accuracy: 0.9888 - val_loss: 0.0471 - learning_rate: 0.0010\n",
      "Epoch 7/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9872 - loss: 0.0396 - val_accuracy: 0.9885 - val_loss: 0.0481 - learning_rate: 0.0010\n",
      "Epoch 8/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9897 - loss: 0.0299 - val_accuracy: 0.9893 - val_loss: 0.0457 - learning_rate: 0.0010\n",
      "Epoch 9/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9908 - loss: 0.0283 - val_accuracy: 0.9888 - val_loss: 0.0468 - learning_rate: 0.0010\n",
      "Epoch 10/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9906 - loss: 0.0281 - val_accuracy: 0.9879 - val_loss: 0.0507 - learning_rate: 0.0010\n",
      "Epoch 11/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9916 - loss: 0.0250 - val_accuracy: 0.9895 - val_loss: 0.0467 - learning_rate: 0.0010\n",
      "Epoch 12/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9942 - loss: 0.0177 - val_accuracy: 0.9902 - val_loss: 0.0494 - learning_rate: 5.0000e-04\n",
      "Epoch 13/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9942 - loss: 0.0159 - val_accuracy: 0.9907 - val_loss: 0.0508 - learning_rate: 5.0000e-04\n",
      "Epoch 14/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9951 - loss: 0.0138 - val_accuracy: 0.9881 - val_loss: 0.0615 - learning_rate: 5.0000e-04\n",
      "Epoch 15/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9965 - loss: 0.0104 - val_accuracy: 0.9892 - val_loss: 0.0577 - learning_rate: 2.5000e-04\n",
      "Epoch 16/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9970 - loss: 0.0089 - val_accuracy: 0.9900 - val_loss: 0.0573 - learning_rate: 2.5000e-04\n",
      "Epoch 17/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9974 - loss: 0.0072 - val_accuracy: 0.9902 - val_loss: 0.0580 - learning_rate: 2.5000e-04\n",
      "Epoch 18/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9977 - loss: 0.0061 - val_accuracy: 0.9910 - val_loss: 0.0577 - learning_rate: 1.2500e-04\n",
      "Epoch 19/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9981 - loss: 0.0061 - val_accuracy: 0.9908 - val_loss: 0.0579 - learning_rate: 1.2500e-04\n",
      "Epoch 20/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9978 - loss: 0.0064 - val_accuracy: 0.9904 - val_loss: 0.0609 - learning_rate: 1.2500e-04\n",
      "Epoch 21/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9987 - loss: 0.0045 - val_accuracy: 0.9907 - val_loss: 0.0599 - learning_rate: 6.2500e-05\n",
      "Epoch 22/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9973 - loss: 0.0063 - val_accuracy: 0.9908 - val_loss: 0.0605 - learning_rate: 6.2500e-05\n",
      "Epoch 23/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9980 - loss: 0.0059 - val_accuracy: 0.9906 - val_loss: 0.0597 - learning_rate: 6.2500e-05\n",
      "Epoch 24/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9978 - loss: 0.0060 - val_accuracy: 0.9902 - val_loss: 0.0607 - learning_rate: 3.1250e-05\n",
      "Epoch 25/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9984 - loss: 0.0050 - val_accuracy: 0.9905 - val_loss: 0.0616 - learning_rate: 3.1250e-05\n",
      "Epoch 26/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9986 - loss: 0.0042 - val_accuracy: 0.9905 - val_loss: 0.0620 - learning_rate: 3.1250e-05\n",
      "Epoch 27/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9984 - loss: 0.0046 - val_accuracy: 0.9905 - val_loss: 0.0624 - learning_rate: 1.5625e-05\n",
      "Epoch 28/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9983 - loss: 0.0046 - val_accuracy: 0.9907 - val_loss: 0.0625 - learning_rate: 1.5625e-05\n",
      "Epoch 29/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9984 - loss: 0.0048 - val_accuracy: 0.9905 - val_loss: 0.0624 - learning_rate: 1.5625e-05\n",
      "Epoch 30/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9984 - loss: 0.0044 - val_accuracy: 0.9905 - val_loss: 0.0628 - learning_rate: 1.0000e-05\n",
      "Epoch 31/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9985 - loss: 0.0048 - val_accuracy: 0.9906 - val_loss: 0.0629 - learning_rate: 1.0000e-05\n",
      "Epoch 32/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9985 - loss: 0.0047 - val_accuracy: 0.9906 - val_loss: 0.0629 - learning_rate: 1.0000e-05\n",
      "Epoch 33/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9988 - loss: 0.0043 - val_accuracy: 0.9906 - val_loss: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 34/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9989 - loss: 0.0036 - val_accuracy: 0.9907 - val_loss: 0.0631 - learning_rate: 1.0000e-05\n",
      "Epoch 35/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9986 - loss: 0.0040 - val_accuracy: 0.9907 - val_loss: 0.0632 - learning_rate: 1.0000e-05\n",
      "Epoch 36/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9985 - loss: 0.0044 - val_accuracy: 0.9906 - val_loss: 0.0633 - learning_rate: 1.0000e-05\n",
      "Epoch 37/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9988 - loss: 0.0036 - val_accuracy: 0.9907 - val_loss: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 38/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9985 - loss: 0.0047 - val_accuracy: 0.9907 - val_loss: 0.0633 - learning_rate: 1.0000e-05\n",
      "Epoch 39/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9988 - loss: 0.0046 - val_accuracy: 0.9907 - val_loss: 0.0636 - learning_rate: 1.0000e-05\n",
      "Epoch 40/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9986 - loss: 0.0044 - val_accuracy: 0.9908 - val_loss: 0.0636 - learning_rate: 1.0000e-05\n",
      "Epoch 41/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9985 - loss: 0.0047 - val_accuracy: 0.9907 - val_loss: 0.0637 - learning_rate: 1.0000e-05\n",
      "Epoch 42/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9984 - loss: 0.0045 - val_accuracy: 0.9906 - val_loss: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 43/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9987 - loss: 0.0043 - val_accuracy: 0.9905 - val_loss: 0.0636 - learning_rate: 1.0000e-05\n",
      "Epoch 44/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9986 - loss: 0.0049 - val_accuracy: 0.9907 - val_loss: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 45/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9984 - loss: 0.0041 - val_accuracy: 0.9907 - val_loss: 0.0636 - learning_rate: 1.0000e-05\n",
      "Epoch 46/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9990 - loss: 0.0035 - val_accuracy: 0.9907 - val_loss: 0.0636 - learning_rate: 1.0000e-05\n",
      "Epoch 47/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9980 - loss: 0.0051 - val_accuracy: 0.9907 - val_loss: 0.0637 - learning_rate: 1.0000e-05\n",
      "Epoch 48/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9986 - loss: 0.0042 - val_accuracy: 0.9907 - val_loss: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 49/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9981 - loss: 0.0056 - val_accuracy: 0.9907 - val_loss: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 50/50\n",
      "\u001b[1m525/525\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9987 - loss: 0.0044 - val_accuracy: 0.9907 - val_loss: 0.0642 - learning_rate: 1.0000e-05\n",
      "Fold Validation Accuracy: 99.10%\n",
      "Mean Validation Accuracy across folds: 99.10%\n",
      "Standard Deviation of Validation Accuracy across folds: 0.00%\n"
     ]
    }
   ],
   "source": [
    " model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Define checkpoint to save best model based on validation accuracy\n",
    "checkpoint = ModelCheckpoint('best_model_fold.keras', monitor='val_accuracy', \n",
    "                             save_best_only=True, mode='max')\n",
    "\n",
    "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=0.00001)\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "\n",
    "def exp_decay(epoch):\n",
    "    lrate = learning_rate * np.exp(-decay_rate*epoch)\n",
    "    return lrate\n",
    "\n",
    "loss_history = History()\n",
    "lr_rate = LearningRateScheduler(exp_decay)\n",
    "callbacks_list = [loss_history, lr_rate, early_stopping, reduce_lr]\n",
    "                               \n",
    "\n",
    "# Train the model\n",
    "history = model.fit(X_train_fold, y_train_fold, epochs=50, batch_size=64, \n",
    "                    validation_data=(X_val_fold, y_val_fold), callbacks=[checkpoint, reduce_lr])\n",
    "\n",
    "# Load the best model and evaluate on the validation set\n",
    "model.load_weights('best_model_fold.keras')\n",
    "scores = model.evaluate(X_val_fold, y_val_fold, verbose=0)\n",
    "print(f\"Fold Validation Accuracy: {scores[1] * 100:.2f}%\")\n",
    "\n",
    "# Save validation accuracy for this fold\n",
    "fold_accuracies.append(scores[1])\n",
    "\n",
    "# After all folds, calculate the mean and std of validation accuracy\n",
    "mean_accuracy = np.mean(fold_accuracies)\n",
    "std_accuracy = np.std(fold_accuracies)\n",
    "\n",
    "print(f\"Mean Validation Accuracy across folds: {mean_accuracy * 100:.2f}%\")\n",
    "print(f\"Standard Deviation of Validation Accuracy across folds: {std_accuracy * 100:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "886e36df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-19T11:49:07.183681Z",
     "iopub.status.busy": "2024-09-19T11:49:07.183016Z",
     "iopub.status.idle": "2024-09-19T11:49:09.432646Z",
     "shell.execute_reply": "2024-09-19T11:49:09.431674Z"
    },
    "papermill": {
     "duration": 2.386034,
     "end_time": "2024-09-19T11:49:09.434679",
     "exception": false,
     "start_time": "2024-09-19T11:49:07.048645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m875/875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ImageId</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ImageId  Label\n",
       "0        1      2\n",
       "1        2      0\n",
       "2        3      9\n",
       "3        4      9\n",
       "4        5      3"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# After K-fold validation, make predictions on test data\n",
    "X_test = test_data / 255.0\n",
    "X_test = X_test.values.reshape(-1, 28, 28, 1)\n",
    "\n",
    "model.load_weights('best_model_fold.keras')  # Load the best model from one of the folds\n",
    "predictions = model.predict(X_test)\n",
    "predicted_labels = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Prepare the submission dataframe\n",
    "digit_recognizer_submission = pd.DataFrame({'ImageId': np.arange(1, len(predicted_labels) + 1),\n",
    "                                            'Label': predicted_labels})\n",
    "digit_recognizer_submission.to_csv('digit_recognizer_CNN_K-Fold.csv', index=False)\n",
    "digit_recognizer_submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5898eef4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-19T11:49:09.705633Z",
     "iopub.status.busy": "2024-09-19T11:49:09.705280Z",
     "iopub.status.idle": "2024-09-19T11:49:10.155069Z",
     "shell.execute_reply": "2024-09-19T11:49:10.154089Z"
    },
    "papermill": {
     "duration": 0.587595,
     "end_time": "2024-09-19T11:49:10.157097",
     "exception": false,
     "start_time": "2024-09-19T11:49:09.569502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training & validation accuracy values\n",
    "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.title('Model Accuracy per Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "# Plot training & validation loss values\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Model loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train', 'Validation'], loc='upper left')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 128.724254,
   "end_time": "2024-09-19T11:49:12.317126",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-19T11:47:03.592872",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
